{"version":3,"sources":["reducers/types.js","components/Header/Header.js","actions/CatalogAction.js","components/Catalog/Catalog.js","components/App/App.js","serviceWorker.js","store/state.js","reducers/Catalog.js","reducers/index.js","config/url.js","services/CatalogServices.js","saga/index.js","store/index.js","index.js"],"names":["types","LOAD_CATALOG","CATALOG_RECEIVED","SELECTED_CATALOG","React","memo","catalogData","useSelector","state","catalogReducer","shallowEqual","dispatch","useDispatch","selectCatalog","catalogId","branchId","data","catalog","branches","type","title","name","className","href","map","v","k","key","v1","k1","onClick","selectSubCat","value","subcategories","categories","selectedBranch","length","src","image","alt","App","useEffect","Boolean","window","location","hostname","match","initialState","loading","action","rootReducer","combineReducers","URL","getCatalog","a","fetch","response","json","fetchData","actionWatcher","rootSaga","put","locations","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0760f532.chunk.js","sourcesContent":["const types = {\n    LOAD_CATALOG: \"LOAD_CATALOG\",\n    CATALOG_RECEIVED: \"CATALOG_RECEIVED\",\n    SELECTED_CATALOG: \"SELECTED_CATALOG\"\n}\n\nexport default types;","import React from 'react';\n\nimport './Header.css';\n\nimport {\n  selectedBranches\n} from \"../../actions/CatalogAction\";\n\nimport {\n  useSelector,\n  useDispatch,\n  shallowEqual\n} from 'react-redux';\n\n/**\n * Login user\n */\nfunction Header() {\n\n  const catalogData = useSelector(state => {\n    return state.catalogReducer\n  }, shallowEqual);\n\n  const dispatch = useDispatch();\n\n  /**\n   * select Catalog\n   * @param {*} catalogId \n   * @param {*} branchId \n   */\n  const selectCatalog = (catalogId,branchId) => {\n    dispatch(selectedBranches(catalogData.catalog[catalogId].branches[branchId]))\n  }\n\n  /**\n   * render \n   */\n  return (\n    <div className=\"header-container\">\n        <p className=\"title\">Rental Management system</p>\n        <ul className=\"top-level-menu\">\n          <li>\n              <a href=\"#\">Select Location</a>\n              <ul className=\"second-level-menu\">\n                  {catalogData.catalog.map((v,k) => {\n                    return (\n                      <li key={k}>\n                        <a href=\"#\">{v.name}</a>\n                        <ul className=\"third-level-menu\">\n                          {v.branches.map((v1,k1) => { \n                            return (\n                            <li key={k1}>\n                              <a href=\"#\" onClick={() => selectCatalog(k,k1)}>{v1.name}</a>\n                            </li>\n                            )\n                          })}\n                        </ul>\n                      </li>\n                    )\n                  })}\n              </ul>\n          </li>\n        </ul>\n      </div>\n  );\n}\n\nexport default React.memo(Header);\n","import types from '../reducers/types';\n\n/**\n * Load Catalog\n * @param {*} data \n */\nexport function loadCatalog() {\n    return {\n        type: types.LOAD_CATALOG\n    }\n}\n\n/**\n * Load Branches\n * @param {*} data \n */\nexport function selectedBranches(data) {\n    return {\n        type: types.SELECTED_CATALOG,\n        branches: data,\n        title : \"/ \"+data.name\n    }\n}\n\n/**\n * Load SUB Branches\n * @param {*} data \n */\nexport function selectedSubBranches(data,title,name) {\n    return {\n        type: types.SELECTED_CATALOG,\n        branches: {\n            categories : data\n        },\n        title: title+\"/ \" + name\n    }\n}\n","import React from 'react';\n\nimport {\n  useSelector,\n  useDispatch,\n  shallowEqual\n} from 'react-redux';\n\nimport {\n  selectedSubBranches\n} from \"../../actions/CatalogAction\";\n\nimport './Catalog.css';\n/**\n * Users\n */\nfunction Catalog() {\n\n  const catalogData = useSelector(state => {\n    return state.catalogReducer\n  }, shallowEqual);\n\n  const dispatch = useDispatch();\n\n  /**\n   * select sub category\n   * @param {*} value \n   */\n  const selectSubCat = (value) => {\n    if(value.subcategories) {\n      dispatch(selectedSubBranches(value.subcategories, catalogData.title,value.name))\n    }\n  } \n\n  return (\n    <>\n      <div className=\"container\">\n        {(catalogData.selectedBranch.categories.length === 0) ? (\n          <div className=\"center\">\n            <h2>Welcome to Rental Management system</h2>\n            <p>Please select location on header</p>\n          </div>\n        ) : (\n          <>\n            <h4>Equipment Catalog {catalogData.title}</h4>\n            {catalogData.selectedBranch.categories.map((v,k) => {\n              return (\n                <div key={k} className=\"sub-container\">\n                  <img src={\"img/\"+v.image} className=\"img\" alt={v.name}/>\n                  <div className=\"footer\">\n                    <h4 onClick={() => selectSubCat(v)}>{v.name}</h4>\n                  </div>\n                </div>\n              )\n            })}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default React.memo(Catalog);\n","import React, {\n    useEffect\n} from 'react';\nimport './App.css';\n\nimport {\n    loadCatalog\n} from \"../../actions/CatalogAction\";\n\nimport {\n    useDispatch\n} from 'react-redux';\n\nimport Header from '../Header/Header';\nimport Catalog from '../Catalog/Catalog';\n\nfunction App() {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n       dispatch(loadCatalog())\n    }, []);\n\n    return (\n        <>\n            <Header></Header>\n            <Catalog></Catalog>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    catalog: [        \n    ],\n    selectedBranch : {\n        categories : []\n    },\n    loading: false,\n    title : \"\"\n}\n\nexport default initialState;","import initialState from '../store/state';\nimport types from './types';\n\nconst catalogReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.LOAD_CATALOG:\n            state = {\n                ...state,\n                loading : true\n            }\n            break;\n        case types.CATALOG_RECEIVED:\n            state = {\n                ...state,\n                loading: false,\n                catalog: action.catalog\n            }\n            break;\n        case types.SELECTED_CATALOG:\n            state = {\n                ...state,\n                selectedBranch: action.branches,\n                title: action.title\n            }\n            break;\n        default:\n            break;\n    }\n\n    return state;\n}\n\nexport default catalogReducer;","import { combineReducers } from 'redux';\nimport catalogReducer from './Catalog';\n\nconst rootReducer = combineReducers({\n    catalogReducer\n})\n\nexport default rootReducer;","export const URL = {\n    API_ENDPOINT: 'http://localhost:3000'\n}","import { URL } from \"../config/url\";\n\n/**\n * get Catalog\n */\nconst getCatalog = async () => {\n    const response = await fetch(`${URL.API_ENDPOINT}/catalog.json`);\n    return response.json();\n}\n\nexport {\n    getCatalog\n};","import { put, takeLatest, all } from 'redux-saga/effects';\nimport { getCatalog } from \"../services/CatalogServices\";\nimport types from \"../reducers/types\";\n\nfunction* fetchData() {\n    const json = yield getCatalog();\n    yield put({ type: types.CATALOG_RECEIVED, catalog: json.data.locations });\n}\n\nfunction* actionWatcher() {\n    yield takeLatest(types.LOAD_CATALOG, fetchData)\n}\n\nexport default function* rootSaga() {\n   yield all([\n    actionWatcher(),\n   ]);\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from '../reducers/index';\nimport rootSaga from '../saga/index';\nimport createSagaMiddleware from 'redux-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(\n            sagaMiddleware\n        ),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n)\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n  Provider\n} from 'react-redux'\nimport store from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}