{"version":3,"sources":["serviceWorker.js","store/state.js","reducers/Task.js","reducers/index.js","config/config.js","services/TaskServices.js","saga/index.js","store/index.js","components/App.js","index.js","reducers/types.js"],"names":["Boolean","window","location","hostname","match","initialState","tasks","users","task","loading","TaskReducer","state","action","type","types","LOAD_CATALOG","LOAD_USERS","GET_TASK","TASKS_RECEIVED","payload","TASK_RECEIVED","USERS_RECEIVED","rootReducer","combineReducers","CONFIG","email","password","getAllTasks","a","doLogin","getAllUsers","user_data","fetch","method","headers","localStorage","getItem","response","json","results","map","v","k","assigned_username","assigned_user","name","modified_username","modified_by","getTask","id","addTasks","data","body","JSON","stringify","updateTask","deleteTask","forEach","rawResponse","content","console","log","setItem","token","getTasks","getUsers","addTasksAction","updateTasksAction","deleteTasksAction","getTaskAction","actionWatcher","rootSaga","put","Object","values","takeLatest","LOAD_TASKS","ADD_TASKS","UPDATE_TASK","DELETE_TASK","all","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","run","List","React","lazy","Header","AddTasks","App","fallback","exact","path","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.74adc0e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    tasks: [],\n    users: [],\n    task: {},\n    loading: false,\n}\n\nexport default initialState;","import initialState from '../store/state';\nimport types from './types';\n\nconst TaskReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.LOAD_CATALOG:\n        case types.LOAD_USERS:\n        case types.GET_TASK:\n            state = {\n                ...state,\n                loading : true\n            }\n            break;\n        case types.TASKS_RECEIVED:\n            state = {\n                ...state,\n                loading : false,\n                tasks: action.payload\n            }\n            break;\n        case types.TASK_RECEIVED:\n            state = {\n                ...state,\n                loading : false,\n                task: action.payload\n            }\n            break;\n        case types.USERS_RECEIVED:\n            state = {\n                ...state,\n                loading : false,\n                users: action.payload\n            }\n            break;\n        \n        default:\n            break;\n    }\n\n    return state;\n}\n\nexport default TaskReducer;","import TaskReducer from './Task';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    TaskReducer\n})\n\nexport default rootReducer;","export const CONFIG = {\n    API_ENDPOINT: 'https://stage.api.sloovi.com',\n    LOGIN_DATA: {\n        email: \"good@test3.com\",\n        password: \"12345678\"\n    },\n    COMPANY_ID: 'company_0336d06ff0ec4b3b9306ddc288482663'\n}","import { CONFIG } from \"../config/config\";\n\n/**\n * get Catalog\n */\nconst getAllTasks = async () => {\n    await doLogin();\n    const user_data = await getAllUsers();\n    const response = await fetch(`${CONFIG.API_ENDPOINT}/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b?company_id=${CONFIG.COMPANY_ID}`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + window.localStorage.getItem('authToken')\n        }\n    });\n\n    const { results } = await response.json();\n    results.map((v, k) => {\n        v.assigned_username = user_data[v.assigned_user].name;\n        v.modified_username = user_data[v.modified_by].name;\n        return v;\n    });\n    return results;\n}\n\n/**\n * get Catalog\n */\n const getTask = async (id) => {\n    await doLogin();\n    const response = await fetch(`${CONFIG.API_ENDPOINT}/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b/${id}?company_id=${CONFIG.COMPANY_ID}`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + window.localStorage.getItem('authToken')\n        }\n    });\n\n    return await response.json();\n}\n\nconst addTasks = async (data) => {\n    await doLogin();\n    const response = await fetch(`${CONFIG.API_ENDPOINT}/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b?company_id=${CONFIG.COMPANY_ID}`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + window.localStorage.getItem('authToken')\n        },\n        body: JSON.stringify(data)\n    });\n\n    return await response.json();\n}\n\nconst updateTask = async (data) => {\n    await doLogin();\n    const  { id } = data;\n    delete data.id;\n    const response = await fetch(`${CONFIG.API_ENDPOINT}/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b/${id}?company_id=${CONFIG.COMPANY_ID}`, {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + window.localStorage.getItem('authToken')\n        },\n        body: JSON.stringify(data)\n    });\n\n    return await response.json();\n}\n\nconst deleteTask = async (id) => {\n    await doLogin();\n    const response = await fetch(`${CONFIG.API_ENDPOINT}/task/lead_c1de2c7b9ab94cb9abad131b7294cd8b/${id}?company_id=${CONFIG.COMPANY_ID}`, {\n        method: 'DELETE',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + window.localStorage.getItem('authToken')\n        },\n        body: JSON.stringify({})\n    });\n\n    return await response.json();\n}\n\nconst getAllUsers = async () => {\n    await doLogin();\n    const response = await fetch(`${CONFIG.API_ENDPOINT}/team?company_id=${CONFIG.COMPANY_ID}&product=outreach`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + window.localStorage.getItem('authToken')\n        }\n    });\n\n    const user_data = {};\n    const { results: { data } } = await response.json();\n    data.forEach((v, k) => user_data[v.id] = v);\n    return user_data;\n}\n\nconst doLogin = async () => {\n    const AuthToken = window.localStorage.getItem('authToken');\n    if (!AuthToken) {\n        const rawResponse = await fetch(`${CONFIG.API_ENDPOINT}/login`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(CONFIG.LOGIN_DATA)\n        });\n        const content = await rawResponse.json();\n        console.log(content, 'json');\n        window.localStorage.setItem('authToken', content.results.token);\n        console.log(content);\n    }\n}\n\nexport {\n    getAllTasks,\n    getAllUsers,\n    addTasks,\n    getTask,\n    updateTask,\n    deleteTask\n};","import { addTasks, deleteTask, getAllTasks, getAllUsers, getTask, updateTask } from \"../services/TaskServices\";\nimport { all, put, takeLatest } from 'redux-saga/effects';\n\nimport types from \"../reducers/types\";\n\nfunction* getTasks() {\n    const json = yield getAllTasks();\n    yield put({ type: types.TASKS_RECEIVED, payload: json });\n}\n\nfunction* getUsers() {\n    const json = yield getAllUsers();\n    yield put({ type: types.USERS_RECEIVED, payload: Object.values(json) });\n}\n\nfunction* addTasksAction(action) {\n    yield addTasks(action.payload);\n}\n\nfunction* updateTasksAction(action) {\n    yield updateTask(action.payload);\n}\n\nfunction* deleteTasksAction(action) {\n    yield deleteTask(action.payload);\n}\n\nfunction* getTaskAction(action) {\n    const json = yield getTask(action.payload);\n    yield put({ type: types.TASK_RECEIVED, payload: json.results });\n}\n\nfunction* actionWatcher() {\n    yield takeLatest(types.LOAD_TASKS, getTasks)\n    yield takeLatest(types.GET_TASK, getTaskAction)\n    yield takeLatest(types.GET_TASK, getTask)\n    yield takeLatest(types.LOAD_USERS, getUsers)\n    yield takeLatest(types.ADD_TASKS, addTasksAction)\n    yield takeLatest(types.UPDATE_TASK, updateTasksAction)\n    yield takeLatest(types.DELETE_TASK, deleteTasksAction)\n}\n\nexport default function* rootSaga() {\n   yield all([\n    actionWatcher(),\n   ]);\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from '../reducers/index';\nimport rootSaga from '../saga/index';\nimport createSagaMiddleware from 'redux-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(\n            sagaMiddleware\n        ),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n)\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React, { Suspense } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from \"react-router-dom\";\n\nimport {\n    Provider\n} from 'react-redux'\nimport store from './../store/index'\n\nconst List = React.lazy(() => import('./List'));\nconst Header = React.lazy(() => import('./Header'));\nconst AddTasks = React.lazy(() => import('./AddTasks'));\n\nfunction App() {\n    return (\n        <Router>\n            <Provider store={store}>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Header />\n\n                    <Switch>\n                        <Route exact  path=\"/\">\n                            <List />\n                        </Route>\n                        <Route exact path=\"/create\">\n                            <AddTasks />\n                        </Route>\n                        <Route exact path=\"/edit/:id\">\n                            <AddTasks />\n                        </Route>\n                    </Switch>\n                </Suspense>\n            </Provider>\n        </Router>\n    );\n}\n\nexport default App;\n","import './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'datatables.net-dt/css/jquery.dataTables.min.css';\nimport 'datatables.net-dt/js/dataTables.dataTables.min.js';\nimport 'jquery/dist/jquery.min.js';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const types = {\n    LOAD_TASKS: \"LOAD_TASKS\",\n    ADD_TASKS: \"ADD_TASKS\",\n    LOAD_USERS: \"LOAD_USERS\",\n    GET_TASK: 'GET_TASK',\n    UPDATE_TASK: 'UPDATE_TASK',\n    DELETE_TASK: 'DELETE_TASK',\n    TASKS_RECEIVED: 'TASKS_RECEIVED',\n    USERS_RECEIVED: 'USERS_RECEIVED',\n    TASK_RECEIVED: 'TASK_RECEIVED',\n}\n\nexport default types;"],"sourceRoot":""}