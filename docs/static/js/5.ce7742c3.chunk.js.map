{"version":3,"sources":["actions/TaskAction.js","components/List.js"],"names":["loadTasks","type","types","LOAD_TASKS","loadUsers","LOAD_USERS","addTasks","data","ADD_TASKS","payload","getTask","id","GET_TASK","updateTask","UPDATE_TASK","deleteTask","DELETE_TASK","React","memo","dispatch","useDispatch","history","useHistory","tasks","useSelector","state","TaskReducer","shallowEqual","useEffect","setTimeout","$","DataTable","className","onClick","push","style","float","width","map","v","k","key","task_msg","moment","task_date","format","is_completed","created","assigned_username","modified_username","modified","cursor","window","confirm","alert"],"mappings":"+GAAA,uNAMO,SAASA,IACZ,MAAO,CACHC,KAAMC,IAAMC,YAQb,SAASC,IACZ,MAAO,CACHH,KAAMC,IAAMG,YAQZ,SAASC,EAASC,GACtB,MAAO,CACHN,KAAMC,IAAMM,UACZC,QAASF,GAQT,SAASG,EAAQC,GACrB,MAAO,CACHV,KAAMC,IAAMU,SACZH,QAASE,GAIV,SAASE,EAAWN,GACvB,MAAO,CACHN,KAAMC,IAAMY,YACZL,QAASF,GAIV,SAASQ,EAAWJ,GACvB,MAAO,CACHV,KAAMC,IAAMc,YACZP,QAASE,K,gCCtDjB,oFAkFeM,cAAMC,MAnErB,WAEE,IAAMC,EAAWC,cACXC,EAAUC,cACRC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAAaC,KAAlDJ,MAuBR,OArBAK,qBAAU,WACRT,EAASnB,eACT6B,YAAW,kBAAMC,IAAE,YAAYC,cAAa,OAC3C,CAACZ,IAmBF,yBAAKa,UAAU,mCACX,4BAAQ/B,KAAK,SAASgC,QAAS,kBAAMZ,EAAQa,KAAK,YAAYC,MAAO,CAACC,MAAO,SAAWJ,UAAU,oCAAlG,UACA,2BAAOrB,GAAG,UAAUqB,UAAU,mCAAmCG,MAAO,CAAEE,MAAO,SAC7E,+BACI,4BACI,yCACA,yCACA,sCACA,0CACA,2CACA,2CACA,2CACA,yCAGR,+BACKd,EAAMe,KAAI,SAACC,EAAGC,GACX,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAEG,UACP,4BAAKC,IAAOJ,EAAEK,WAAWC,OAAO,cAChC,4BAAyB,IAAnBN,EAAEO,aAAsB,cAAgB,aAC9C,4BAAKH,IAAOJ,EAAEQ,SAASF,OAAO,cAC9B,4BAAKN,EAAES,mBACP,4BAAKT,EAAEU,mBACP,4BAAKN,IAAOJ,EAAEW,UAAUL,OAAO,cAC/B,4BACI,0BAAMV,MAAO,CAAEgB,OAAQ,WAAalB,QAAS,kBAAMZ,EAAQa,KAAK,SAAUK,EAAE5B,KAAKqB,UAAU,oBAA3F,QACA,0BAAMG,MAAO,CAAEgB,OAAQ,WAAalB,QAAS,kBA7CrDtB,EA6CwE4B,EAAE5B,GA5C9EyC,OAAOC,QAAQ,sCAE3BlC,EAASJ,YAAWJ,IACpBkB,YAAW,WACPyB,MAAM,6BACNnC,EAASnB,iBACV,OAGA,EAVY,IAACW,GA6C+EqB,UAAU,wBAAjF","file":"static/js/5.ce7742c3.chunk.js","sourcesContent":["import types from '../reducers/types';\n\n/**\n * Load Catalog\n * @param {*} data \n */\nexport function loadTasks() {\n    return {\n        type: types.LOAD_TASKS\n    }\n}\n\n/**\n * Load Users\n * @param {*} data \n */\nexport function loadUsers() {\n    return {\n        type: types.LOAD_USERS\n    }\n}\n\n/**\n * Load Users\n * @param {*} data \n */\n export function addTasks(data) {\n    return {\n        type: types.ADD_TASKS,\n        payload: data\n    }\n}\n\n/**\n * getTask\n * @param {*} data \n */\n export function getTask(id) {\n    return {\n        type: types.GET_TASK,\n        payload: id\n    }\n}\n\nexport function updateTask(data) {\n    return {\n        type: types.UPDATE_TASK,\n        payload: data\n    }\n}\n\nexport function deleteTask(id) {\n    return {\n        type: types.DELETE_TASK,\n        payload: id\n    }\n}","import React, { useEffect } from 'react';\nimport { deleteTask, loadTasks } from '../actions/TaskAction';\nimport {\n    shallowEqual,\n    useDispatch,\n    useSelector\n} from 'react-redux';\n\nimport $ from'jquery';\nimport moment from 'moment';\nimport { useHistory } from \"react-router-dom\";\n\n/**\n * Login user\n */\nfunction List() {\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { tasks } = useSelector(state => state.TaskReducer, shallowEqual);\n\n  useEffect(() => {\n    dispatch(loadTasks());\n    setTimeout(() => $('#example').DataTable(), 1000);\n  }, [dispatch]);\n\n  const deleteAction = (id) => {\n    const confirm = window.confirm(\"Do you want to delete this task?\");\n    if (confirm) {\n        dispatch(deleteTask(id));\n        setTimeout(() =>{ \n            alert('Task deleted successfully');\n            dispatch(loadTasks());\n        }, 500);\n       \n    }\n    return false;\n  }\n\n  /**\n   * render \n   */\n  return (\n    <div className=\"container mt-4 table-responsive\">\n        <button type=\"button\" onClick={() => history.push(\"/create\")} style={{float: 'right'}}  className=\"btn btn-primary mb-4 float-right\">Create</button>\n        <table id=\"example\" className=\"table table-hover table-bordered\" style={{ width: '100%'}}>\n            <thead>\n                <tr>\n                    <th>Task Name</th>\n                    <th>Task Date</th>\n                    <th>status</th>\n                    <th>Created At</th>\n                    <th>Assigned By</th>\n                    <th>Modified By</th>\n                    <th>Modified At</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {tasks.map((v, k) => {\n                    return (\n                        <tr key={k}>\n                            <td>{v.task_msg}</td>\n                            <td>{moment(v.task_date).format(\"MMM Do YY\")}</td>\n                            <td>{(v.is_completed === 0) ? 'In Progress' : 'Completed'}</td>\n                            <td>{moment(v.created).format(\"MMM Do YY\")}</td>\n                            <td>{v.assigned_username}</td>\n                            <td>{v.modified_username}</td>\n                            <td>{moment(v.modified).format(\"MMM Do YY\")}</td>\n                            <td>\n                                <span style={{ cursor: 'pointer' }} onClick={() => history.push('/edit/'+ v.id)} className=\"badge bg-warning\">Edit</span>\n                                <span style={{ cursor: 'pointer' }} onClick={() => deleteAction(v.id)} className=\"badge bg-danger mx-2\">Delete</span>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    </div>\n  );\n}\n\nexport default React.memo(List);\n"],"sourceRoot":""}